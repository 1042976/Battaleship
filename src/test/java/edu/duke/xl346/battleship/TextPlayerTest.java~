package edu.duke.xl346.battleship;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.StringReader;

import org.junit.jupiter.api.Test;

public class TextPlayerTest {
  private TextPlayer createTextPlayer(String name, int w, int h, String inputData, OutputStream bytes){
    BufferedReader input = new BufferedReader(new StringReader(inputData));
    PrintStream output = new PrintStream(bytes, true);
    Board<Character> board = new BattleShipBoard<Character>(w, h);
    V1ShipFactory shipFactory = new V1ShipFactory();
    return new TextPlayer(name, board, input, output, shipFactory);
  }
  @Test
  void test_read_placement() throws IOException {
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    TextPlayer player = createTextPlayer("A", 10, 20, "B2V\nC8H\na4v\n", bytes);
    String prompt = "Please enter a location for a ship:";
    Placement[] expected = new Placement[3];
    expected[0] = new Placement(new Coordinate(1, 2), 'V');
    expected[1] = new Placement(new Coordinate(2, 8), 'H');
    expected[2] = new Placement(new Coordinate(0, 4), 'V');
    for (int i = 0; i < expected.length; ++i) {
      Placement p = player.readPlacement(prompt);
      assertEquals(p, expected[i]);
      assertEquals(prompt + "\n", bytes.toString());
      bytes.reset();
    }
  }

  @Test
  void test_doOnePlacement() throws IOException{
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    TextPlayer player = createTextPlayer("A", 3, 2, "A0V\nA1H\nb0v\nc0v\nb2h\n", bytes);
    String[] expectedStr = new String[3];
    String expectedHeader = "  0|1|2\n";
    String prompt = "Player A where do you want to place a Destroyer?";
    expectedStr[0] = expectedHeader+"A s| |  A\nB  | |  B\n"+expectedHeader;
    expectedStr[1] = expectedHeader+"A s|s|  A\nB  | |  B\n"+expectedHeader;
    expectedStr[2] = expectedHeader+"A s|s|  A\nB s| |  B\n"+expectedHeader;
    for (int i = 0; i < expectedStr.length; ++i) {
      player.doOnePlacement();
    }
    assertEquals(prompt+"\n"+expectedStr[0]+"\n"+
                 prompt+"\n"+expectedStr[1]+"\n"+
        prompt + "\n" + expectedStr[2] + "\n", bytes.toString());
  }

  @Test
  void test_doPlacementPhase() throws IOException{
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    TextPlayer player = createTextPlayer("A", 3, 2, "A0V\nA1H\nb0v\nc0v\nb2h\n", bytes)
  }
}













